---
- block:
  - name: get latest release
    uri:
      url: "https://api.github.com/repos/grafana/grafana/releases/latest"
      method: GET
      return_content: true
      status_code: 200
      body_format: json
      validate_certs: false
      user: "{{ lookup('env', 'GH_USER') | default(omit) }}"
      password: "{{ lookup('env', 'GH_TOKEN') | default(omit) }}"
    no_log: "{{ not lookup('env', 'ANSIBLE_DEBUG') | bool }}"
    register: _latest_release
    until: _latest_release.status == 200
    retries: 5

  - name: set grafana version to the latest
    set_fact:
      grafana_version: "{{ _latest_release.json.tag_name[1:] }}"
  when:
    - grafana_version == "latest"

- name: install grafana
  yum:
    name: {{ grafana_download_url }}
    state: latest

- name: configure grafana
  template:
    src: "{{ grafana_config_file }}"
    dest: "{{ grafana_config_dir }}/grafana.ini"
  notify: event_restart_grafana

- name: start grafana-server service
  service:
    name: "{{ service_name }}"
    state: started
    enabled: yes

- name: check if prometheus datasource exists
  uri:
    url: "http://localhost:3000/api/datasources/name/prometheus"
    user: "{{ grafana_user }}"
    password: "{{ grafana_password }}"
    force_basic_auth: yes
  register: grafana_prometheus
  failed_when: false
  changed_when: false
  when: grafana_prometheus

- name: create prometheus datasource
  grafana_datasource:
    name: "{{ item.name }}"
    grafana_url: "{{ grafana_url }}"
    grafana_user: "{{ grafana_user }}"
    grafana_password: "{{ grafana_password }}"
    ds_type: "{{ item.ds_type }}"
    url: "{{ item.url }}"
    state: present
  with_items: "{{ data_source }}"
  when: grafana_prometheus and grafana_prometheus.status == 404

- name: check if grafana is accessible
  uri:
    url: http://localhost:3000
    method: GET
    status_code: 200